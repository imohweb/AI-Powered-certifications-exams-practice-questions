name: Deploy Backend to Azure Web App

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend-webapp.yml'
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: backend-ai-practice-questions-app
  ACR_NAME: ${{ secrets.ACR_NAME }}
  IMAGE_NAME: backend-ai-practice-questions

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: cert-practice-question-env
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Azure Container Registry
        run: |
          az acr login --name ${{ env.ACR_NAME }}

      - name: Get build number
        id: build_number
        run: |
          BUILD_NUMBER=${{ github.run_number }}
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "Build number: $BUILD_NUMBER"

      - name: Build and push Docker image
        id: build_image
        working-directory: ./backend
        run: |
          IMAGE_TAG=${{ steps.build_number.outputs.BUILD_NUMBER }}
          FULL_IMAGE_NAME=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
          LATEST_IMAGE_NAME=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
          
          echo "Building image: $FULL_IMAGE_NAME"
          
          # Build and push with build number tag
          docker build -t $FULL_IMAGE_NAME -t $LATEST_IMAGE_NAME .
          docker push $FULL_IMAGE_NAME
          docker push $LATEST_IMAGE_NAME
          
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "FULL_IMAGE_NAME=$FULL_IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Check if Web App exists
        id: check_webapp
        run: |
          if az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} &> /dev/null; then
            echo "WEBAPP_EXISTS=true" >> $GITHUB_OUTPUT
            echo "Web App exists"
          else
            echo "WEBAPP_EXISTS=false" >> $GITHUB_OUTPUT
            echo "Web App does not exist - will create"
          fi

      - name: Create App Service Plan (if needed)
        if: steps.check_webapp.outputs.WEBAPP_EXISTS == 'false'
        run: |
          # Check if plan exists
          if ! az appservice plan show --name backend-ai-practice-plan --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} &> /dev/null; then
            echo "Creating App Service Plan..."
            az appservice plan create \
              --name backend-ai-practice-plan \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --is-linux \
              --sku B1 \
              --location ${{ secrets.AZURE_REGION }}
          else
            echo "App Service Plan already exists"
          fi

      - name: Create Web App (if not exists)
        if: steps.check_webapp.outputs.WEBAPP_EXISTS == 'false'
        run: |
          az webapp create \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --plan backend-ai-practice-plan \
            --deployment-container-image-name ${{ steps.build_image.outputs.FULL_IMAGE_NAME }}

      - name: Configure Web App
        run: |
          # Enable container logging
          az webapp log config \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --docker-container-logging filesystem

          # Configure ACR credentials
          az webapp config container set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --docker-custom-image-name ${{ steps.build_image.outputs.FULL_IMAGE_NAME }} \
            --docker-registry-server-url https://${{ env.ACR_NAME }}.azurecr.io

          # Set environment variables
          az webapp config appsettings set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --settings \
              WEBSITES_PORT=8000 \
              CORS_ORIGINS="https://imohweb.github.io" \
              AZURE_SPEECH_KEY="${{ secrets.AZURE_SPEECH_KEY }}" \
              AZURE_SPEECH_REGION="${{ secrets.AZURE_SPEECH_REGION }}" \
              AZURE_TRANSLATOR_KEY="${{ secrets.AZURE_TRANSLATOR_KEY }}" \
              AZURE_TRANSLATOR_REGION="${{ secrets.AZURE_TRANSLATOR_REGION }}" \
              AZURE_OPENAI_API_KEY="${{ secrets.AZURE_OPENAI_API_KEY }}" \
              AZURE_OPENAI_ENDPOINT="${{ secrets.AZURE_OPENAI_ENDPOINT }}" \
              AZURE_OPENAI_DEPLOYMENT_NAME="${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }}"

      - name: Restart Web App
        run: |
          az webapp restart \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}

      - name: Get Web App URL
        id: get_url
        run: |
          WEBAPP_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          echo "WEBAPP_URL=$WEBAPP_URL" >> $GITHUB_OUTPUT
          echo "Web App URL: $WEBAPP_URL"

      - name: Wait for deployment
        run: |
          echo "Waiting for web app to be ready..."
          sleep 30

      - name: Test backend health
        id: test_health
        continue-on-error: true
        run: |
          WEBAPP_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          echo "Testing backend at: $WEBAPP_URL/health"
          
          for i in {1..10}; do
            if curl -f -s "$WEBAPP_URL/health" > /dev/null; then
              echo "Backend is healthy!"
              echo "HEALTH_CHECK=PASSED" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "Attempt $i failed, waiting 10 seconds..."
            sleep 10
          done
          
          echo "HEALTH_CHECK=FAILED" >> $GITHUB_OUTPUT
          echo "Backend health check failed after 10 attempts"

      - name: Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.test_health.outputs.HEALTH_CHECK }}" == "PASSED" ]; then
            echo "✅ **Backend successfully deployed and healthy!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Backend deployed but health check failed**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Image Tag | \`${{ steps.build_image.outputs.IMAGE_TAG }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Web App Name | \`${{ env.AZURE_WEBAPP_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend URL | ${{ steps.get_url.outputs.WEBAPP_URL }} |" >> $GITHUB_STEP_SUMMARY
          echo "| API Endpoint | ${{ steps.get_url.outputs.WEBAPP_URL }}/api/v1 |" >> $GITHUB_STEP_SUMMARY
          echo "| Health Status | ${{ steps.test_health.outputs.HEALTH_CHECK }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Configure GitHub Secret: \`BACKEND_CONTAINER_APP_URL\` = \`${{ steps.get_url.outputs.WEBAPP_URL }}\`" >> $GITHUB_STEP_SUMMARY
          echo "2. Redeploy frontend to use new backend URL" >> $GITHUB_STEP_SUMMARY
          echo "3. Test: ${{ steps.get_url.outputs.WEBAPP_URL }}/api/v1/assessments/certifications" >> $GITHUB_STEP_SUMMARY
