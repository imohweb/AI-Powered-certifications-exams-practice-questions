name: Deploy Backend to Azure Web App

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend-webapp.yml'
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: backend-ai-practice-questions-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: cert-practice-question-env
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check if Web App exists
        id: check_webapp
        run: |
          if az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} &> /dev/null; then
            echo "WEBAPP_EXISTS=true" >> $GITHUB_OUTPUT
            echo "Web App exists"
          else
            echo "WEBAPP_EXISTS=false" >> $GITHUB_OUTPUT
            echo "Web App does not exist - will create"
          fi

      - name: Create App Service Plan (if needed)
        if: steps.check_webapp.outputs.WEBAPP_EXISTS == 'false'
        run: |
          # Check if plan exists
          if ! az appservice plan show --name backend-ai-practice-plan --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} &> /dev/null; then
            echo "Creating App Service Plan..."
            az appservice plan create \
              --name backend-ai-practice-plan \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --is-linux \
              --sku B1 \
              --location ${{ secrets.AZURE_REGION }}
          else
            echo "App Service Plan already exists"
          fi

      - name: Create Web App (if not exists)
        if: steps.check_webapp.outputs.WEBAPP_EXISTS == 'false'
        run: |
          az webapp create \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --plan backend-ai-practice-plan \
            --runtime "PYTHON:3.11"

      - name: Configure Web App Settings
        run: |
          # Enable application logging
          az webapp log config \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --application-logging filesystem \
            --level information

          # Configure startup command
          az webapp config set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --startup-file "uvicorn main:app --host 0.0.0.0 --port 8000"

          # Set environment variables
          az webapp config appsettings set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --settings \
              SCM_DO_BUILD_DURING_DEPLOYMENT=true \
              CORS_ORIGINS='["https://imohweb.github.io","https://frontend-ai-practice-questions-app.azurewebsites.net"]' \
              AZURE_SPEECH_KEY="${{ secrets.AZURE_SPEECH_KEY }}" \
              AZURE_SPEECH_REGION="${{ secrets.AZURE_SPEECH_REGION }}" \
              AZURE_TRANSLATOR_KEY="${{ secrets.AZURE_TRANSLATOR_KEY }}" \
              AZURE_TRANSLATOR_REGION="${{ secrets.AZURE_TRANSLATOR_REGION }}" \
              AZURE_OPENAI_KEY="${{ secrets.AZURE_OPENAI_API_KEY }}" \
              AZURE_OPENAI_ENDPOINT="${{ secrets.AZURE_OPENAI_ENDPOINT }}" \
              AZURE_OPENAI_DEPLOYMENT="${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }}"

      - name: Deploy to Azure Web App using az webapp up
        run: |
          cd backend
          
          # Deploy using az webapp up which handles build automatically
          az webapp up \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --runtime "PYTHON:3.11" \
            --sku B1 \
            --logs

      - name: Get Web App URL
        id: get_url
        run: |
          WEBAPP_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          echo "WEBAPP_URL=$WEBAPP_URL" >> $GITHUB_OUTPUT
          echo "Web App URL: $WEBAPP_URL"

      - name: Wait for deployment
        run: |
          echo "Waiting for web app to be ready..."
          sleep 45

      - name: Test backend health
        id: test_health
        continue-on-error: true
        run: |
          WEBAPP_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          echo "Testing backend at: $WEBAPP_URL/health"
          
          for i in {1..15}; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$WEBAPP_URL/health")
            if [ "$HTTP_CODE" = "200" ]; then
              echo "Backend is healthy! (HTTP $HTTP_CODE)"
              echo "HEALTH_CHECK=PASSED" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "Attempt $i failed (HTTP $HTTP_CODE), waiting 10 seconds..."
            sleep 10
          done
          
          echo "HEALTH_CHECK=FAILED" >> $GITHUB_OUTPUT
          echo "Backend health check failed after 15 attempts"

      - name: Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.test_health.outputs.HEALTH_CHECK }}" == "PASSED" ]; then
            echo "✅ **Backend successfully deployed and healthy!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Backend deployed but health check failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Troubleshooting:**" >> $GITHUB_STEP_SUMMARY
            echo "- Check logs: \`az webapp log tail --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- May need 2-3 minutes for Python app to start" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Web App Name | \`${{ env.AZURE_WEBAPP_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend URL | ${{ steps.get_url.outputs.WEBAPP_URL }} |" >> $GITHUB_STEP_SUMMARY
          echo "| API Endpoint | ${{ steps.get_url.outputs.WEBAPP_URL }}/api/v1 |" >> $GITHUB_STEP_SUMMARY
          echo "| Health Status | ${{ steps.test_health.outputs.HEALTH_CHECK }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment Method | Direct from GitHub Actions (Python runtime) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Test backend: \`curl ${{ steps.get_url.outputs.WEBAPP_URL }}/health\`" >> $GITHUB_STEP_SUMMARY
          echo "2. Configure GitHub Secret: \`BACKEND_CONTAINER_APP_URL\` = \`${{ steps.get_url.outputs.WEBAPP_URL }}\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Redeploy frontend to use new backend URL" >> $GITHUB_STEP_SUMMARY
          echo "4. Test full API: ${{ steps.get_url.outputs.WEBAPP_URL }}/api/v1/assessments/certifications" >> $GITHUB_STEP_SUMMARY
