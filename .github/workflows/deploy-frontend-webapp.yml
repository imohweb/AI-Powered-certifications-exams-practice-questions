name: Deploy Frontend to Azure Web App

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend-webapp.yml'
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: frontend-ai-practice-questions-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: cert-practice-question-env
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check if Web App exists
        id: check_webapp
        run: |
          if az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} &> /dev/null; then
            echo "WEBAPP_EXISTS=true" >> $GITHUB_OUTPUT
            echo "Web App exists"
          else
            echo "WEBAPP_EXISTS=false" >> $GITHUB_OUTPUT
            echo "Web App does not exist - will create"
          fi

      - name: Create Web App if needed
        if: steps.check_webapp.outputs.WEBAPP_EXISTS == 'false'
        run: |
          # Use the existing App Service Plan from backend
          # Use NODE:20-lts for static files serving
          az webapp create \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --plan backend-ai-practice-plan \
            --runtime "NODE:20-lts"
          
          echo "✅ Web App created successfully"

      - name: Configure Web App settings
        run: |
          # Enable logging
          az webapp log config \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --web-server-logging filesystem \
            --docker-container-logging filesystem \
            --application-logging filesystem \
            --level information

          # Configure startup command
          az webapp config set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --startup-file "npm run serve"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Create .env file for production
        working-directory: ./frontend
        run: |
          # Use the backend Web App URL
          BACKEND_URL="https://backend-ai-practice-questions-app.azurewebsites.net"
          API_URL="${BACKEND_URL}/api/v1"
          
          echo "REACT_APP_API_URL=${API_URL}" > .env
          echo "REACT_APP_ENV=production" >> .env
          
          echo "Frontend will connect to: ${API_URL}"

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          CI: false
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: Deploy to Azure Web App using az webapp up
        run: |
          cd frontend
          
          # Deploy the frontend directory with server.js
          az webapp up \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --runtime "NODE:20-lts" \
            --sku B1 \
            --logs

      - name: Get Web App URL
        id: get_url
        run: |
          WEBAPP_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          echo "WEBAPP_URL=$WEBAPP_URL" >> $GITHUB_OUTPUT
          echo "Frontend URL: $WEBAPP_URL"

      - name: Wait for deployment
        run: |
          echo "Waiting for web app to be ready..."
          sleep 30

      - name: Test frontend availability
        id: test_frontend
        continue-on-error: true
        run: |
          WEBAPP_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          echo "Testing frontend at: $WEBAPP_URL"
          
          for i in {1..10}; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$WEBAPP_URL")
            if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "304" ]; then
              echo "Frontend is live! (HTTP $HTTP_CODE)"
              echo "FRONTEND_CHECK=PASSED" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "Attempt $i failed (HTTP $HTTP_CODE), waiting 10 seconds..."
            sleep 10
          done
          
          echo "FRONTEND_CHECK=FAILED" >> $GITHUB_OUTPUT
          echo "Frontend availability check failed after 10 attempts"

      - name: Deployment Summary
        run: |
          echo "## 🎉 Frontend Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend Web App" >> $GITHUB_STEP_SUMMARY
          echo "- **Name**: ${{ env.AZURE_WEBAPP_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          echo "- **Resource Group**: ${{ secrets.AZURE_RESOURCE_GROUP }}" >> $GITHUB_STEP_SUMMARY
          echo "- **App Service Plan**: backend-ai-practice-plan (shared with backend)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ steps.test_frontend.outputs.FRONTEND_CHECK }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Backend API" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://backend-ai-practice-questions-app.azurewebsites.net/api/v1" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.test_frontend.outputs.FRONTEND_CHECK }}" = "FAILED" ]; then
            echo "### ⚠️ Troubleshooting" >> $GITHUB_STEP_SUMMARY
            echo "Frontend check failed. Try:" >> $GITHUB_STEP_SUMMARY
            echo "- Check logs: \`az webapp log tail --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Verify deployment: https://portal.azure.com" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✅ Success!" >> $GITHUB_STEP_SUMMARY
            echo "Your frontend is now live at: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          fi
