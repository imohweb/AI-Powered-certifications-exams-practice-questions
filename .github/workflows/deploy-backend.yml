name: Deploy Backend to Azure Container Apps

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
  CONTAINER_APP_NAME: ${{ secrets.CONTAINER_APP_NAME }}
  CONTAINER_APP_ENV: ${{ secrets.CONTAINER_APP_ENV }}
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_REGION: ${{ secrets.AZURE_REGION }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: cert-practice-question-env
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Azure Container Registry
        run: |
          az acr login --name ${{ env.ACR_NAME }}

      - name: Get build number
        id: build_number
        run: |
          # Get the current build number (number of commits on main branch)
          BUILD_NUMBER=$(git rev-list --count HEAD)
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "Build number: $BUILD_NUMBER"

      - name: Build and push Docker image
        id: build_image
        working-directory: ./backend
        run: |
          IMAGE_TAG=${{ steps.build_number.outputs.BUILD_NUMBER }}
          FULL_IMAGE_NAME=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
          LATEST_IMAGE_NAME=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
          
          echo "Building image: $FULL_IMAGE_NAME"
          
          # Build and push with build number tag
          docker build -t $FULL_IMAGE_NAME -t $LATEST_IMAGE_NAME .
          docker push $FULL_IMAGE_NAME
          docker push $LATEST_IMAGE_NAME
          
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "FULL_IMAGE_NAME=$FULL_IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Check if Container App exists
        id: check_app
        run: |
          if az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &> /dev/null; then
            echo "APP_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "APP_EXISTS=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Container App (if not exists)
        if: steps.check_app.outputs.APP_EXISTS == 'false'
        run: |
          az containerapp create \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --environment ${{ env.CONTAINER_APP_ENV }} \
            --image ${{ steps.build_image.outputs.FULL_IMAGE_NAME }} \
            --target-port 8000 \
            --ingress 'external' \
            --min-replicas 1 \
            --max-replicas 3 \
            --cpu 1.0 \
            --memory 2.0Gi \
            --registry-server ${{ env.ACR_NAME }}.azurecr.io \
            --env-vars \
              AZURE_SPEECH_KEY=secretref:azure-speech-key \
              AZURE_SPEECH_REGION=${{ secrets.AZURE_SPEECH_REGION }} \
              AZURE_TRANSLATOR_KEY=secretref:azure-translator-key \
              AZURE_TRANSLATOR_REGION=${{ secrets.AZURE_TRANSLATOR_REGION }} \
              AZURE_OPENAI_API_KEY=secretref:azure-openai-api-key \
              AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }} \
              AZURE_OPENAI_DEPLOYMENT_NAME=${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }} \
            --secrets \
              azure-speech-key=${{ secrets.AZURE_SPEECH_KEY }} \
              azure-translator-key=${{ secrets.AZURE_TRANSLATOR_KEY }} \
              azure-openai-api-key=${{ secrets.AZURE_OPENAI_API_KEY }}

      - name: Update Container App
        if: steps.check_app.outputs.APP_EXISTS == 'true'
        run: |
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ steps.build_image.outputs.FULL_IMAGE_NAME }} \
            --set-env-vars \
              AZURE_SPEECH_KEY=secretref:azure-speech-key \
              AZURE_SPEECH_REGION=${{ secrets.AZURE_SPEECH_REGION }} \
              AZURE_TRANSLATOR_KEY=secretref:azure-translator-key \
              AZURE_TRANSLATOR_REGION=${{ secrets.AZURE_TRANSLATOR_REGION }} \
              AZURE_OPENAI_API_KEY=secretref:azure-openai-api-key \
              AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }} \
              AZURE_OPENAI_DEPLOYMENT_NAME=${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }}

      - name: Update secrets (if needed)
        if: steps.check_app.outputs.APP_EXISTS == 'true'
        run: |
          az containerapp secret set \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --secrets \
              azure-speech-key=${{ secrets.AZURE_SPEECH_KEY }} \
              azure-translator-key=${{ secrets.AZURE_TRANSLATOR_KEY }} \
              azure-openai-api-key=${{ secrets.AZURE_OPENAI_API_KEY }}

      - name: Get Container App URL
        id: get_url
        run: |
          FQDN=$(az containerapp show \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv)
          echo "CONTAINER_APP_URL=https://$FQDN" >> $GITHUB_OUTPUT
          echo "Container App URL: https://$FQDN"

      - name: Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… **Backend successfully deployed!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Image Tag | \`${{ steps.build_image.outputs.IMAGE_TAG }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Container App | \`${{ env.CONTAINER_APP_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | \`${{ env.CONTAINER_APP_ENV }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| URL | ${{ steps.get_url.outputs.CONTAINER_APP_URL }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Previous images are retained in ACR for rollback purposes.**" >> $GITHUB_STEP_SUMMARY
