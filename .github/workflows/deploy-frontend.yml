name: Deploy Frontend to GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    environment: cert-practice-question-env
    outputs:
      api_url: ${{ steps.create_env.outputs.API_URL }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Create .env file
        id: create_env
        working-directory: ./frontend
        run: |
          # Use the backend Container App URL
          # Format: https://{container-app-name}.{region}.azurecontainerapps.io
          BACKEND_URL="${{ secrets.BACKEND_CONTAINER_APP_URL }}"
          
          # If BACKEND_CONTAINER_APP_URL is not set, fall back to constructing it from parts
          if [ -z "$BACKEND_URL" ]; then
            BACKEND_URL="https://${{ secrets.CONTAINER_APP_NAME }}.${{ secrets.AZURE_REGION }}.azurecontainerapps.io"
          fi
          
          # Remove trailing slash if present
          BACKEND_URL="${BACKEND_URL%/}"
          
          # Create .env file with the API URL (already includes /api/v1 path)
          API_URL="${BACKEND_URL}/api/v1"
          echo "REACT_APP_API_URL=${API_URL}" > .env
          echo "REACT_APP_ENV=production" >> .env
          
          # Export for use in summary
          echo "API_URL=${API_URL}" >> $GITHUB_OUTPUT
          
          # Log the configuration (for debugging)
          echo "Frontend will connect to: ${API_URL}"

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          CI: false
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './frontend/build'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… **Frontend successfully deployed to GitHub Pages!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend URL | ${{ steps.deployment.outputs.page_url }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend API | \`${{ needs.build.outputs.api_url }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Production |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | Live |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** Frontend is configured to connect to the backend API shown above." >> $GITHUB_STEP_SUMMARY

